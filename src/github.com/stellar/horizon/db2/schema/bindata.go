// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5b\x6d\x6f\xdb\x38\xf2\x7f\x9f\x4f\x41\xec\x1b\x3b\x80\x9d\x7f\xd2\x74\xbb\x59\x07\xbb\x80\x37\x51\xff\x35\xce\x91\xbb\xb1\x72\x6d\x71\x38\x08\xb4\xc4\xd8\xba\xca\xa2\x2a\xca\x69\xb3\x87\xfb\xee\x37\xd4\x93\xf5\x40\x8a\x94\x23\xe7\xfa\xa6\xb1\x38\x9c\x99\xdf\x70\x38\x9c\x19\x51\xe3\xf1\xc9\x78\x8c\x3e\x52\x16\xaf\x23\xb2\xfc\x73\x8e\x5c\x1c\xe3\x15\x66\x04\xb9\xbb\x6d\x08\x63\x27\x27\x4b\xc3\x42\x2c\xc6\x31\xd9\x92\x20\xb6\x63\x6f\x4b\xe8\x2e\x46\xbf\xa1\xf3\xeb\x64\xc8\xa7\xce\xd7\xe6\x53\xc7\xf7\x38\x35\x09\x1c\xea\x7a\xc1\x1a\x06\x06\x0f\xd6\xfb\xab\xc1\x75\xce\x2e\x70\x71\xe4\xda\x0e\x0d\x1e\x69\xb4\x05\x0a\x9b\xc5\x11\xfc\xc7\x80\x92\x06\x19\x8f\x0d\x01\xd6\x8f\xbb\xc0\x89\x3d\x1a\xd8\x2b\xe0\x44\xf8\xf8\x23\xf6\x19\xa9\x88\x01\x06\xf6\x96\x30\x86\xd7\x09\xc1\x77\x1c\x05\xc0\xeb\x3a\xd3\x9d\xe0\xc8\xd9\xd8\x21\x8e\x37\x30\x16\xee\x56\xbe\xe7\x8c\x50\xb8\xb6\x1d\x80\xea\x53\x4e\x76\x7b\xbf\xf8\x88\x66\xe6\xad\xf1\x19\xcd\xde\x23\xe3\xf3\x6c\x69\x2d\x33\xca\xb3\x38\xc2\x2e\xb1\xc9\xe3\x23\x71\x62\x66\xaf\x9e\x6d\x1a\xb9\x24\x02\x6d\xe8\xd7\xeb\xd6\x89\x5e\xe0\x92\x1f\xf6\xc6\x63\x31\x8d\x9e\x6d\x60\x13\x30\x9c\x20\x61\x36\xa0\xf1\xdc\x2e\xb3\x69\x48\x22\x5c\xcc\x8d\x9f\x43\xf2\x82\xd9\x7b\x4d\x5e\xa4\x45\xb7\xb9\x3e\x71\xd7\x24\x4a\x26\x32\xf2\x6d\x07\x8e\xd1\x09\x42\x69\x7a\x18\x91\x27\x8f\xee\x58\xf6\xcc\xde\x60\xb6\x39\x90\xd5\xcb\x39\x78\xdb\x90\x46\x31\xf0\x78\x82\x07\x1e\xf7\xdc\xc3\xd8\x1c\x6a\x4b\xc7\xa7\x8c\xb8\x36\x8e\xbb\xcc\xcf\x9d\xf9\x00\x57\xc2\x8e\x43\x77\x41\x7c\x80\xd2\xe5\x99\xd8\x75\x23\xd8\xae\xed\xd3\x37\x71\xc8\xb7\xdb\x26\x56\xc9\xd9\xb0\x8a\x4f\xc3\x1c\x8d\x19\xd9\xd2\xeb\x10\xd3\x54\x0f\xaa\x24\x04\xa4\x76\xfc\xc3\x0e\xd5\x2c\x39\x25\xb0\xd5\xa4\x24\xba\x64\x79\x74\x6a\x27\x5e\xe5\x1e\xa4\x24\x53\x6f\x8c\x55\xb1\xb0\xd7\x27\xd3\xb9\x65\xdc\x23\x6b\xfa\xc7\xdc\x28\x11\x2e\xcc\xf9\x97\xb2\x9a\xb5\x60\x08\x71\x39\x8a\x3d\xc7\x0b\x31\xf8\x06\x4a\x44\xdd\x2c\xcc\xa5\x75\x3f\x9d\x99\x56\x89\x8d\x6a\xaa\x1d\x7e\x25\xcf\x5d\x74\x28\x82\x59\x57\x0d\xc4\x13\xb5\xe5\xaf\x69\x14\xc2\x81\xb5\xce\x22\x69\x8b\xc0\x1a\x65\xab\x04\x5d\x03\xa7\xb3\x6f\x16\xf3\x87\x3b\x13\x79\x6e\x2a\xfd\xd6\x78\x3f\x7d\x98\x5b\x9a\xbc\x25\x86\x6b\xe7\x9c\xfc\xd2\x57\x3a\x0f\x0d\x4b\xe3\xcf\x07\xc3\xbc\x39\x00\x29\x6c\x19\x7e\xd0\x74\x96\x5c\x61\xa2\x37\x7b\x7f\x2c\x6a\x6b\x2d\xf1\xa1\x2e\x3a\x8b\x59\xe8\xcd\xcd\x0e\x10\x3d\xe2\xec\xb4\xd0\x23\xce\xa3\x7c\x3b\x75\xcd\xb3\x33\x62\xe3\xb3\x65\x98\xcb\xd9\xc2\x2c\x6f\x3a\xce\x96\xb4\x10\x84\x7e\xb8\x66\xdf\xfc\xdc\xf2\x37\x1f\x8c\xbb\x69\x43\xe0\xf5\x49\x9a\xe7\x9a\x78\x4b\x26\xf9\x33\x64\xc1\xd9\x37\xc9\xa6\x5c\xa3\x25\xa4\x9b\x5b\x3c\x41\xe3\x6b\xb4\xf8\x1e\x90\x08\xfe\x4a\xd2\xdf\x9b\x7b\x63\x6a\x19\x39\xe7\x9c\xdf\x49\x85\x63\x75\x30\x63\x7c\xb3\xb8\xbb\x33\x4c\xab\x85\x73\x4a\x00\xd1\xa1\xca\x00\xcd\x96\x68\x90\xa7\xc8\xf9\x33\x96\x30\x19\xd4\x25\xe7\xf0\x33\x99\x85\x85\x94\x78\x2a\xb6\x34\x17\x56\xcd\x9e\xe8\xd3\xcc\xfa\x50\xa8\x55\xce\x95\x2b\xe2\xf7\x5c\x6a\x8a\x74\x01\xdf\x60\x92\x18\xe0\xe3\xfc\xff\xc2\x35\xaf\x48\xc2\x88\x3a\xc4\xdd\x45\xd8\x47\x3e\x0e\xd6\x3b\x48\xf2\x1b\x66\xc8\xdc\xa4\x37\x2b\xa4\xfc\xaa\x46\x10\xae\xfc\x9e\x41\x55\x85\xc3\xf0\x67\x62\x39\x7c\x5e\x87\x21\x9e\x9d\x21\x28\x90\x10\x7f\xce\xcb\x28\x46\x20\xd2\xd2\x47\x34\x84\xa3\x60\x84\x9e\xb0\xbf\x23\xa7\x28\xc4\x5e\xc4\x12\x93\x68\x96\x3b\x9c\xcc\x25\x8f\x78\xe7\x43\xbe\x82\x57\x3e\x61\x21\x76\x08\xaf\xd1\x06\xb5\xd1\xef\x5e\xbc\xb1\x21\xf1\x29\x95\x5d\x15\xf8\xf5\x8d\x9c\xa1\x4f\xb6\xfd\x1e\x7b\xbe\x2f\x72\x03\x00\x59\x21\x75\x82\xca\xeb\x91\xc6\x8b\xfa\x11\x39\x3c\x41\xf0\x0f\xce\x94\x98\xfc\x88\x93\x65\x32\x1f\xe6\xf3\x51\xf2\x14\x87\x21\xd4\x80\x3c\x03\x46\xbc\x08\x85\x6d\xb3\x0d\x11\x57\x3b\xf9\x89\xfe\xa2\x01\x39\x39\x6d\xb8\x4b\x3d\x5a\xf5\xa3\x77\x9d\xed\x5e\xf1\x95\xb7\xf6\x82\x86\xea\x69\x16\x0c\x75\x2e\x8e\xe0\xf0\x21\x11\x2c\x68\xf4\x0c\xcb\x3c\x7c\xf7\xf6\x54\xae\x74\x1e\x8f\xfb\xd5\x39\xe3\x9a\xa9\x5c\x43\x62\xcb\x20\x34\x0f\x23\x19\xe5\x4f\x49\x62\xfa\x13\x82\x11\x02\x67\x4f\x6d\x34\x71\x74\xf1\x90\x4b\x62\xec\xf9\x0c\xfd\x8b\xd1\x60\x25\xb7\x4a\x7e\xa4\xf5\x6b\x95\x8c\x6b\x66\x95\xbc\x70\x95\x68\x5a\xaa\x26\xc5\x6b\x5a\xa3\x17\x15\xb2\xe2\x89\x99\x91\x4a\x59\x4a\xb2\x2c\x85\x1e\x59\x9a\x85\xce\x6b\x12\xf6\xcb\xa2\x47\x5f\x54\x93\xb5\xbd\xc4\x5b\x3b\xc5\x76\xaa\xcf\x89\x08\x8e\x95\x93\x52\xda\x5d\xe8\x6a\xd3\x16\x8e\x94\xfd\xac\x15\xda\x0d\x2c\x17\x75\x97\xa2\x10\xee\x00\xb7\x07\x01\x44\xe8\x91\x8f\x84\xd8\x21\xa5\xbe\x78\x94\xf7\xc0\x6c\x20\x91\xac\x75\x32\x0c\xbb\x97\x44\x4f\x32\x92\x2d\xfe\xc1\xab\x41\x08\xd9\x36\xf3\xfe\x6a\x52\xc9\x7d\x59\x92\xda\xf5\xeb\xda\x92\x34\xbe\x08\x59\x62\x50\xfa\x1b\x5e\x1d\x42\xba\x1a\x20\x4f\x8f\xf3\xc4\x2d\xcb\xb2\xe5\xa6\xa8\xe4\x6f\x79\x4e\xae\x25\x23\x41\xb0\xb4\xa6\xf7\x56\x9a\x03\x5c\x24\x0f\x66\x26\x30\x4b\x4e\xed\x3f\xbe\x64\x8f\xcc\x05\xba\x9b\x99\x7f\x9f\xce\x1f\x8c\xe2\xf7\xf4\xf3\xfe\xf7\xcd\x14\xb2\x07\x74\xd1\x0b\x50\xb4\xf8\x64\x1a\xb7\x20\x5b\x81\x38\xad\xc4\xba\x01\x2e\x78\x2b\xc8\xcf\x78\x27\x42\x81\xe5\x68\x9e\xaa\x3a\x50\xab\x9d\x4d\xc9\xa1\xcb\xf3\x05\x27\x05\x96\x1c\x49\x2f\x3c\x91\xd2\x47\x8c\xee\x22\x87\xe4\xbe\x2e\x89\xfe\x79\xa4\x1a\x0c\x26\x93\x06\x85\xc6\xae\x90\x56\xa9\xfd\x9a\x5b\xda\x3b\xd0\x0c\x0d\x3a\xab\xf0\x92\xe0\xa0\xaa\xf8\xfb\x09\x0f\x0a\x29\xaf\x15\x20\x3a\x82\x7d\x61\x88\x50\x48\x6b\x06\x09\xd9\x84\x96\x30\x51\xe9\xf2\x1c\xcd\x73\x73\x6f\x2d\x2b\xa8\x9d\x98\x65\xf9\x98\x22\xdd\xd3\x8d\x24\xed\x41\x41\x48\xbb\x17\x2d\xcf\x5c\xb0\x74\x23\xca\xb2\xbe\xff\x49\xde\x06\x19\x10\x09\x9e\x88\x0f\x4a\x89\xca\x37\x18\x86\x2c\x0a\x4a\x4d\xc9\xe0\x96\xf0\x32\x58\x38\xc4\xad\x20\x1b\x66\xde\x3a\xc0\xf1\x0e\x58\x0b\xcc\xfe\xeb\xbb\xd3\x7f\xfc\x73\x1f\x8d\xff\xfd\x1f\x51\x3c\x06\x8a\x5a\x3a\x47\xb6\x34\x79\x5d\xd2\xe4\xb8\xe7\x15\x80\x19\x5a\xa3\xfb\x9e\x57\x93\x4d\x86\x0c\xcc\x69\xaf\x60\xe1\xa0\xe8\x06\x2b\x5e\x81\x03\xaf\x05\x25\x2c\x6c\xb0\x6c\xf3\xe4\x3d\x56\x9d\x1d\x9f\xee\x97\xa4\x1d\xdd\xb1\x9d\xcb\xbb\x02\x39\xcc\x00\x0c\xfe\x84\xfd\xe1\x40\x2b\xb5\x00\x7b\x44\x64\xed\xf8\x98\xb1\xe3\xa1\xd0\x6e\x78\xb7\xe2\x50\xc4\x3f\x31\x92\x5b\xde\xa9\xe1\x4d\x1a\x75\x4b\x04\xdd\x4e\xad\xa9\x02\xe2\xcc\x5c\x1a\x70\xaa\xcc\x4c\x6b\xd1\x68\x84\x24\xc7\xc6\x12\x0d\x07\x17\xb6\x17\x78\xb1\x07\x05\x4e\xda\x17\x3c\x63\xdf\xfc\xc1\x08\x0d\xde\x9c\x5f\xbc\x1b\x9f\x5f\x8e\xdf\x5c\xa1\x8b\x9f\x27\x17\xbf\x4e\xde\x5e\x9d\x5d\x5e\xfe\xfc\xf6\xed\x2f\xe3\xf3\x5f\x06\xa0\xb4\x16\xf7\x37\x76\xfa\xea\xae\x62\x82\x15\x98\x87\x7a\x6e\xbb\xa4\xab\x77\xf0\x28\x95\x24\x31\x4f\x6b\xeb\x45\xc7\x3e\x0a\xbe\xa2\xee\x48\x0f\x6c\x45\xed\x85\x1e\xd8\x6a\x54\x7a\x5d\xa4\xbc\xa4\xb8\x80\x8d\xa1\x90\xb2\x34\xe6\xc6\x8d\x55\x6a\x25\x9e\x41\x6d\xdb\x21\x0e\x8c\xd0\xc5\x28\xed\x22\xaa\xdd\x43\x52\x4c\xf4\x60\x72\xad\x2c\xfa\x70\xa3\x77\x4d\xd8\xfa\x30\xbb\x2a\x6c\x75\x31\xbc\x34\x3d\xeb\x6e\x12\xe1\xfb\xcb\xa2\x3f\x9e\xbf\xf0\xec\x94\xf6\x35\xe2\x7f\x4d\x46\x72\x82\x4e\x6f\x6f\xcb\x2f\x54\x45\x6a\xa0\x8f\xf7\xb3\xbb\xe9\xfd\x17\xf4\x37\xe3\x0b\x1a\x7a\x6e\xd7\x4e\xc4\x31\xa0\xb4\x8b\x14\x21\xd3\x50\x52\x1b\x68\xfb\x7b\xf5\x23\x41\x95\x09\x6d\x03\xdb\xaa\xa8\x12\x6e\xe9\xbe\x42\x86\x29\xb9\xd8\x70\x48\xed\x91\xde\x88\xd8\x33\xe4\xaf\x72\x84\x95\xc8\xc3\x72\x66\xfe\x3f\x5a\xc5\x11\x21\x68\x98\x11\x8f\x1a\xa9\xbe\x48\xd5\xe4\xfe\x45\x6f\x7a\x26\xf5\x8f\x96\x92\xf5\xaa\x49\xa4\x5b\x76\x85\xa4\x37\xed\x52\x7e\x7a\xfa\xd5\x0a\xb4\x51\xb3\x16\x13\xfa\x79\xf9\x86\xcc\x4b\xf5\x7e\x30\x67\x10\xc1\x33\xf5\x6b\xcc\xcb\x20\xf2\xf7\x2a\x15\xfd\x45\x5d\xd4\x51\xfe\x8a\x44\xa6\xfa\x3e\x57\xee\x55\x69\xc8\x89\x75\xd5\xdd\x77\x6b\x46\xc2\x46\xb0\x02\x42\x7e\xe1\xa9\x7f\x14\x19\xe7\x32\x10\x49\x59\x73\x10\x2e\x31\x9c\xfc\xa6\x57\xff\x70\x32\xce\x92\xbd\x70\x20\xa0\x6a\x5b\xae\x09\xa9\x74\xcb\xad\x9f\x3d\x5d\xe2\x78\xe8\xc2\xb4\x2f\x42\xed\x12\x5f\xbf\xeb\x50\x65\x5e\x06\x90\xbf\x13\xac\x68\x2c\xd6\xaf\x79\x2d\xb1\x6f\x25\x1b\x12\xf4\x02\xa8\x48\xdd\xd2\x75\xcb\x9e\x1c\x60\xcf\xf1\x70\x57\x56\xb8\xad\xfa\x8e\x69\xaf\x16\x57\x8a\x2b\x03\x2d\xae\x01\x54\x13\x80\x94\xb0\x03\x92\xbe\xdd\xa6\x4d\x92\x5a\x7f\xe5\x22\xd4\x6f\x17\xf7\xe3\x4c\xad\x32\x94\x27\x18\x27\x52\xa8\x2d\xbc\x54\x7d\x0c\xdd\x45\x82\x94\xf1\xa5\xa0\xd4\x47\x71\x5c\xb7\xa9\x08\x3a\x24\x3c\xea\x5f\xa9\x3f\xf2\x22\x34\x6e\x16\x28\xc1\xd4\x26\xe8\x43\x2b\x7f\x6f\xf0\x3a\x6b\x53\xbe\x5a\xa2\xc2\x55\xa2\xd5\x87\x24\xfc\x1a\xe3\x75\xb0\x09\xef\xcf\xa8\x40\x8a\x26\xe9\xa3\x2d\x3e\x5d\x79\x1d\x84\xc5\x6b\x20\x15\x2a\x69\x11\xa9\xf8\x80\xe7\x88\x30\xea\xb2\x84\x39\x60\xd7\x30\xd1\xfa\x25\xd3\x31\xe2\x44\x9b\x40\x1d\x44\x9d\xd2\x17\xc1\x57\x5e\xaf\x80\xa9\x76\x7e\x4a\x91\xa8\x8f\x50\xc1\x37\x6e\x47\x74\xb0\xa6\xb4\x83\x73\xdf\xb6\x6f\xfc\xfa\x59\x81\x16\x09\xca\xe4\x65\x38\xcc\x6f\x9c\x8c\x7f\xff\x1d\x0d\x18\xf5\x21\x11\x60\xfc\x5e\x19\x5f\x93\xc1\x64\xc2\x5f\x80\x9e\x9e\x8e\x90\x9c\xd0\xa1\xae\x1e\xa1\xc7\xd8\x8e\x44\x72\xd2\x15\xdd\xad\x37\xb1\x96\xf8\x0a\x69\xbb\x02\x15\xd2\x9a\x0a\xa7\xe8\xd3\x07\xe3\xde\x48\x1d\x10\xfd\x86\x2e\x2f\x4b\xcb\x27\xfb\x70\x15\x39\x74\x1b\xfa\x24\x26\xc9\x4a\xfc\x37\x00\x00\xff\xff\x8e\xc6\x9d\xdc\xe5\x3a\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 15077, mode: os.FileMode(420), modTime: time.Unix(1459203588, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x6d\x6f\xdb\x46\x12\xfe\xee\x5f\xb1\xc8\x17\xc9\x38\xf9\x2e\x41\x0e\x41\xce\x46\x02\x28\x36\x73\x11\x2a\x53\x89\x44\x35\x09\x8a\x82\x58\x91\x2b\x8a\x35\xc9\x65\x76\x49\xbf\xa4\xe8\x7f\xef\x2c\xdf\xdf\x96\xa4\x6c\xd2\x2d\x0a\xb4\xe2\xce\xce\xcc\x33\x33\xfb\xcc\x70\xe9\xb3\x33\xf4\x2f\xd7\xb6\x18\x0e\x08\xda\xfa\x27\x67\x67\xf0\x2f\xfa\x4c\x79\x60\x31\xb2\xf9\xb2\x44\x26\x0e\xf0\x0e\x73\x82\xcc\xd0\x8d\x96\x4f\x36\x8a\x86\x78\x00\xf2\x2e\xf1\x02\x3d\xb0\x5d\x42\xc3\x00\xbd\x43\x2f\x2f\xa2\x25\x87\x1a\x37\xf5\xa7\x86\x63\x0b\x69\xe2\x19\xd4\xb4\x3d\x0b\x16\x26\x5b\xed\xe3\xdb\xc9\x45\xaa\xce\x33\x31\x33\x75\x83\x7a\x7b\xca\x5c\x90\xd0\x79\xc0\xe0\x3f\x1c\x24\xa9\x97\xe8\x38\x10\x50\xbd\x0f\x3d\x23\xb0\xa9\xa7\xef\x40\x13\x11\xeb\x7b\xec\x70\x52\x32\x03\x0a\x74\x97\x70\x8e\xad\x48\xe0\x0e\x33\x0f\x74\x5d\x9c\x24\xf0\x54\xec\x92\x73\xe4\x3b\xbe\xc5\x7f\x38\x17\x48\x7b\xf0\xe1\xa7\xf2\x4d\x53\xd4\xcd\x62\xa5\x5e\xa0\x0d\x58\x72\xf1\x39\x3a\xbb\x40\xab\x3b\x8f\x30\xf8\xbf\x08\xf9\xe5\x5a\x99\x6b\x4a\x2e\x89\x16\x1f\x91\xba\xd2\xe0\xc1\x62\xa3\x6d\x52\x85\xe8\xeb\x42\xfb\x84\x36\x97\x9f\x94\xeb\x39\xf2\x2d\xdd\x80\x08\x3a\x54\x58\x2f\x99\xcf\xb5\x54\x1c\xb9\x5c\x5d\x5f\x2b\xaa\xd6\xe2\x46\x2c\x80\x60\x6b\x4d\x09\x5a\x6c\xd0\xe4\xf3\xf2\x3f\xbe\x25\x92\xe7\x33\x6a\x10\x33\x64\xd8\x41\x0e\xf6\xac\x10\xe2\x31\xa9\xfa\x71\xe0\x01\x65\x64\xb8\x28\xc4\xfa\xca\x41\x08\x77\x8e\x6d\xc8\x03\x50\x76\xe1\x71\xf8\x13\xb3\x02\xbe\x28\x59\x14\x80\x2e\x04\xb5\x84\xc4\x73\x51\x71\x9c\x04\x1c\xd1\x3d\x9a\xde\x90\x87\x19\xba\xc5\x4e\x48\x4e\x91\x8f\x6d\xc6\xa3\x90\x44\x65\x48\x30\x33\x0e\xba\x8f\x83\x03\x54\x4d\xec\xf5\xac\x9c\x42\x21\x66\x92\x3d\x0e\x1d\x28\x7d\xbc\x73\x08\xf7\xb1\x41\x44\x39\x4f\x2a\xab\x77\x76\x70\xd0\xa9\x6d\x16\x2a\xb4\x1c\x77\x5b\x78\xf6\xa0\x63\xc3\xa0\xa1\x17\xf0\x14\xbe\x36\xff\xb0\x54\x72\xf0\x49\xec\xb2\x08\x80\x58\x66\xf6\xbc\x98\x8f\x68\x5f\x4d\x2b\x9a\x9e\x20\xf8\xc7\x36\xd1\xce\xb6\x6c\x2f\x88\x32\xa5\x6e\x97\xcb\x59\xf4\x1c\x9b\x26\x83\x73\x02\x47\x0b\x33\x6c\x04\x84\x41\x60\xd8\x03\x84\x6b\xfa\xe6\xbf\xa7\x27\xa7\xb5\x5a\x49\xb4\x93\xfd\x9e\x18\x43\xbb\x9c\x28\x4d\x3c\xae\x00\xd1\x65\x08\x52\x39\xea\x13\xe0\x30\xc1\x0b\x32\xc9\x17\x94\x99\x84\xbd\x40\xb0\x42\x2c\x40\x5a\x5e\x8d\xea\xa5\x79\xc9\x24\x01\xb6\x1d\x8e\xfe\xe0\xd4\xdb\xc9\x83\xe2\x10\x13\xf6\x0e\x1c\x94\x44\x69\x12\x14\x4e\x7e\x84\x40\xa1\x32\x47\x63\x61\xfd\x80\xf9\xa1\x39\xa3\x15\x79\x9f\x91\x5b\x9b\x86\x5c\xef\xdc\x98\xc4\x88\x61\x8f\xe3\x98\x7d\xa3\xac\x64\x7e\x5c\x29\x1f\xe7\xdb\xa5\x86\x5e\x56\x2c\xe4\x59\xe9\x27\x6f\x38\x94\x13\x53\xc7\x01\x12\x1d\x04\xda\x82\xeb\x23\x71\x90\x44\x2f\x11\x4f\xd0\x4f\xea\x91\xea\x1e\x46\xa0\x19\x75\x6d\x8a\x65\x43\xdf\xec\x2d\x9b\xd5\x51\xf2\xd3\xf5\x29\x83\xb0\xe8\xb7\x90\x0f\x40\x54\xc3\xf2\xaa\x5a\x51\x14\x48\x03\x70\xdb\x1e\x6f\x2e\xc8\x3d\x21\xba\x4f\xa9\xd3\xbc\x2a\x9a\xae\x0e\x22\x92\x5c\x47\xcb\x70\x76\x09\xbb\x95\x89\xb8\xf8\x5e\x0f\xee\x75\x20\x3e\x9d\xdb\x3f\xeb\x52\xf2\x52\xce\xd3\xe6\x63\x16\xd8\x86\xed\xe3\xc1\x19\xaa\xd9\x46\xce\x57\xcd\x98\xfa\x1f\xf7\x6e\x02\x39\x16\x3f\xa8\x80\x60\xfe\x48\xc3\xb0\x51\xbe\x6c\x15\xf5\xb2\x25\x12\x45\xf0\xa9\x74\x3f\x1b\x11\x82\x8d\x36\x5f\x6b\x71\x23\x7d\x15\x3d\x58\xa8\xa0\x2c\x6a\x7d\x1f\xbe\x27\x8f\xd4\x15\xba\x5e\xa8\xbf\xce\x97\x5b\x25\xfb\x3d\xff\x96\xff\xbe\x9c\x43\x0b\x46\xaf\x06\x01\x8a\x56\x5f\x55\xe5\x0a\x6c\x77\x20\x9e\x2f\x35\x65\x7d\x24\xe0\x4c\x77\x87\xf8\xbf\x6d\xb3\x13\xcb\x58\x85\xda\xd5\x4c\x8b\xf4\x28\x6d\xb8\xbe\x0f\x3e\xc4\xb8\xa2\x7e\xf4\xc4\x76\x14\x3f\xe2\x34\x64\x06\x49\x4b\x5d\xc2\xfd\x29\x4f\x4d\x26\xe7\xe7\x35\x89\x1e\x87\xa2\x08\x6f\x3c\x5a\x90\x59\x89\x62\x2f\xa1\x85\xa6\xbd\xcd\x09\x78\x0a\x29\xc8\x3c\x1b\x96\x16\x3a\xac\x3c\x17\x31\x1c\x09\xf6\x89\xd4\xd0\x61\xad\x4e\x0e\xb2\x0d\x2d\xf4\x50\xd8\x32\x5e\xc9\xa6\x14\x51\xf4\xaf\xf7\x38\x96\x4c\x61\x1d\x43\x5e\x5f\x06\x69\x27\x83\x46\xd9\xdc\xb4\x7c\x5e\xc1\xd2\xd6\x2c\x9b\xf5\xfe\x91\x69\x0d\xe6\x1e\xe2\xdd\x12\x07\x9c\x42\x01\xb9\xaf\x51\xf5\xbd\x98\x9d\xe0\x35\x4d\xb2\xe8\x12\xf1\x0a\xd9\xb8\x24\xa2\x20\x5b\xe6\xb6\xe5\xe1\x20\x04\xd5\x0d\x61\xff\xdf\x9b\xd3\xdf\x7e\xcf\x59\xf8\xcf\xbf\x9a\x78\x18\x24\x2a\x43\x1c\x71\xa9\x1e\x75\x83\x3a\x67\x67\xba\x3c\x08\x43\x2b\xab\xe7\xba\xea\x6a\x12\x64\x10\x4e\x7d\x07\x89\x83\x17\x56\x88\xe2\x5b\x28\x60\x8b\x44\x64\x58\x3c\x4c\x70\xbc\x92\xa3\x93\xd8\xee\x75\xde\xe3\xe3\xb2\x52\x97\x5d\xdd\x1d\xc5\xf2\x97\xab\xe5\xf6\x5a\x15\x29\x15\x2f\xd4\x29\x4a\x0f\xe2\x0d\xaf\xed\xd3\x49\xaf\x81\x02\xc2\xc1\x88\x65\x38\x98\xf3\x1a\xa3\x0f\x86\x42\xda\xac\x8e\xc2\xd1\xc1\x7e\x6d\x48\x3a\x42\xe1\xdf\x90\x87\xfc\x5a\x45\xdd\x68\xeb\xf9\x42\x6d\x41\x5b\x27\xbc\x23\x13\x18\x95\xd2\xfc\xea\xaa\x60\xad\x8f\x8f\xe8\xf3\x7a\x71\x3d\x5f\x7f\x47\xbf\x28\xdf\xd1\xd4\x36\x8f\xef\xc1\x23\x22\x95\xd9\x6c\xc3\xda\xea\x67\x27\xda\x5d\x36\xa0\xa4\x90\x16\xea\x95\xf2\xed\x11\x8d\x2a\xda\x57\xd0\x27\xee\xcc\x1a\xdb\xd6\x76\xb3\x50\xff\x8f\x76\x01\x83\x17\xce\x69\x22\x3c\xab\xf5\x85\x26\x4f\x45\x7b\x1b\xcc\xcd\xa8\x57\xf6\xf2\xb1\xda\x61\x9b\x5c\x8b\x1b\xea\x60\xce\xc5\xea\xfa\xb9\x57\xe9\xe5\xb3\x7a\xdb\x6e\xac\x71\x1d\x38\xf8\x21\x5e\x7f\xaa\xdb\x5b\x75\x01\x53\x56\xe2\x7d\x45\x77\x11\x43\x7a\xed\x56\x72\xbf\xe9\x35\x7b\x96\xde\xa0\xc9\x3c\xcf\x69\x75\x48\x9f\x81\x3d\xfb\x7a\x9b\x4f\xf5\xb3\xc6\x8b\x82\x0e\x04\xd4\xd7\xfd\x51\x40\x24\x8a\x8b\x38\x24\xfd\xef\x51\xb0\xea\x68\xb2\x1b\x3d\x48\xf8\xd0\x80\xca\xba\x8b\x98\xd2\xbb\xca\x12\x88\x66\xf7\x8a\xa7\x77\x14\x1f\x6b\x06\xfa\x1d\xdb\x06\x6f\x6d\xcf\x24\xf7\x7a\xf5\x5e\x5d\x07\xbd\xc9\xe5\xf9\xa0\xae\x77\x5a\x2b\xe2\xc8\x2e\xf9\xcb\xec\x1d\x0b\x1e\x01\x64\xe0\xf0\xb7\x19\xea\x76\xbf\x33\x05\x09\x05\x08\x7d\x62\x2e\x1e\x86\xde\x5b\x4d\x74\x12\x90\x10\xea\xf0\x3a\x39\x1c\x42\x65\x76\xc9\x3d\x86\xeb\x4d\x76\x3a\x0f\x69\x26\xd9\x1f\xc4\xa8\x35\x53\xb2\xf3\x18\x8a\x91\xab\xab\xdc\xe2\x8f\x9c\x82\xda\x47\x83\x4e\x2c\x95\x0d\xfd\x91\x15\xbe\xe1\x3c\x4f\x66\x8a\x1f\x8d\xba\x60\x15\x64\xfb\x23\x6a\xfa\x3c\xf5\x3c\xd0\x1a\x3f\x8c\x75\x61\x6c\xda\xd4\x1f\x6c\x3a\x29\x3e\x0f\xc0\xec\xa2\xa7\x0b\x94\x74\xf2\x2f\xab\xce\xef\xc8\x47\xe7\x86\xaa\xa9\xc6\xa9\xea\x58\x86\x28\x2b\x2d\xdf\x23\x8f\x41\x11\x6d\xf6\xfa\x00\x2a\xef\x38\x0e\xdc\x48\x3d\xb3\x6e\xa5\x17\x90\xa6\xce\x19\x0d\xcd\xc1\xfd\x48\xd3\x78\xa2\x58\x32\x10\x3e\x72\x1e\xaf\x27\x44\x9e\x8f\xe2\xf8\x39\xfa\x71\xa9\x1b\x7b\xf4\x24\x0c\xc2\x26\xc9\x66\xa3\xf4\x5d\x52\xdf\x51\x7a\x33\x4c\x41\xb5\x18\xe8\x1c\xc1\xa6\xd3\xf4\xbb\xd8\xd9\xfb\xf7\x68\xc2\xa9\x03\xf3\x0c\x17\xdf\xbe\x45\x89\x4d\xce\xcf\xc5\x75\xed\xe9\xe9\x0c\xc9\x05\x0d\x6a\xf6\x13\xb4\x39\x0f\x09\x93\x8b\xee\x68\x68\x1d\x82\x5e\xe6\x4b\xa2\xed\x0e\x94\x44\x2b\x2e\x9c\xa2\xaf\x9f\x94\xb5\x12\x9f\x27\xf4\x0e\xbd\x7e\x5d\xc8\x9e\xec\xaf\xf9\x90\x41\x5d\xdf\x21\x01\x89\x32\x51\xfc\x43\xc0\x2b\x7a\xe7\x9d\x98\x8c\xfa\x28\xfa\x1b\xa7\xe6\x72\x31\x30\x37\x20\x5f\x17\x1d\x82\xe5\x03\xd5\xb6\xa9\xc0\x11\xbd\xc4\xfa\x6b\x4e\x5b\x5b\x9b\x4c\x5a\x55\x6d\x32\xd9\x1b\x4b\x26\xf4\x77\x00\x00\x00\xff\xff\x5d\xb2\x1f\x7d\x3f\x29\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10559, mode: os.FileMode(420), modTime: time.Unix(1459187450, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8f\xb1\x0a\xc2\x30\x10\x86\xf7\x7b\x8a\x1b\x15\xe9\x13\x74\x12\x1b\xa4\x4b\x2a\xd5\x82\x5b\x48\xdb\x60\x6e\x30\x17\x92\x03\xe9\xdb\x2b\x3a\xd8\xda\xc5\xf5\xf8\xf8\xfe\xfb\x8a\x02\x77\x77\xba\x25\x2b\x0e\xbb\x08\x70\x68\xd5\xfe\xa2\xb0\xd6\x95\xba\xa2\xe7\x68\xfa\xc9\x78\xa6\x11\x1b\x8d\x9e\xb2\x70\x9a\x0c\x47\xf7\xe2\x89\x83\x89\x36\x09\x0d\x14\x6d\x90\x8c\xdd\xb9\xd6\x47\xec\x25\x39\x87\x9b\x35\x4b\xe3\xb6\xfc\xd1\xcb\x47\x2f\x4b\xbd\x24\x1b\xb2\x1d\xfe\x1c\x98\xd3\xef\x09\x98\x27\x55\xfc\x08\x00\x55\xdb\x9c\xd6\x49\xe5\xe2\xfe\xfd\xa5\x84\x67\x00\x00\x00\xff\xff\x33\xec\x54\x7a\x15\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 277, mode: os.FileMode(420), modTime: time.Unix(1459202974, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

