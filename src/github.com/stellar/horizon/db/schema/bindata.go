// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5b\x6d\x6f\xdb\x38\xf2\x7f\x9f\x4f\x41\xec\x1b\x3b\x80\x9d\x7f\x9c\xdd\x7f\xaf\x75\xb0\x0b\x78\x13\xf5\x6a\x9c\x23\x77\x63\xe5\xda\xe2\x70\x10\x68\x89\xb1\x75\x95\x25\x55\x94\xd3\x66\x0f\xf7\xdd\x6f\x24\x91\xb2\x1e\x48\x91\x72\xe4\x5c\x5f\xb4\xb5\x38\x9c\x99\xdf\x90\x9c\x27\x51\xe3\xf1\xd9\x78\x8c\x3e\x86\x34\xd9\xc4\x64\xf5\xc7\x02\xb9\x38\xc1\x6b\x4c\x09\x72\xf7\xbb\x08\xc6\xce\xce\x56\x86\x85\x68\x82\x13\xb2\x23\x41\x62\x27\xde\x8e\x84\xfb\x04\xfd\x8a\x2e\xaf\xb3\x21\x3f\x74\xbe\x36\x9f\x3a\xbe\x97\x52\x93\xc0\x09\x5d\x2f\xd8\xc0\xc0\xe0\xc1\x7a\xff\x76\x70\xcd\xd9\x05\x2e\x8e\x5d\xdb\x09\x83\xc7\x30\xde\x01\x85\x4d\x93\x18\xfe\xa1\x40\x19\x06\x8c\xc7\x96\x00\xeb\xc7\x7d\xe0\x24\x5e\x18\xd8\x6b\xe0\x44\xd2\xf1\x47\xec\x53\x52\x11\x03\x0c\xec\x1d\xa1\x14\x6f\x32\x82\xef\x38\x0e\x80\xd7\x35\xd3\x9d\xe0\xd8\xd9\xda\x11\x4e\xb6\x30\x16\xed\xd7\xbe\xe7\x8c\x50\xb4\xb1\x1d\x80\xea\x87\x29\xd9\xed\xfd\xf2\x23\x9a\x9b\xb7\xc6\x67\x34\x7f\x8f\x8c\xcf\xf3\x95\xb5\x62\x94\x17\x49\x8c\x5d\x62\x93\xc7\x47\xe2\x24\xd4\x5e\x3f\xdb\x61\xec\x92\x18\xb4\x09\xbf\x5e\xb7\x4e\xf4\x02\x97\xfc\xb0\xb7\x1e\x4d\xc2\xf8\xd9\x06\x36\x01\xc5\x19\x12\x6a\x03\x1a\xcf\x3d\x72\x36\x00\x89\x13\xcf\xf1\x22\x1c\x24\x19\xa7\xf2\xd8\x16\xd3\x6d\x5f\x7c\xb1\xe3\x84\xfb\x20\xe9\xc2\x2e\x8c\x48\x8c\x0b\x88\xc9\x73\x44\x5e\x30\xbb\xa4\x5a\x37\x63\x55\xf9\x74\x9b\xeb\x13\x77\x43\xe2\x6c\x22\x25\xdf\xf6\xb0\x7f\x3b\x41\x28\x4d\x8f\x62\xf2\xe4\x85\x7b\xca\x9e\x75\x5e\x9a\x12\xab\x97\x73\xf0\x76\x51\x18\x27\xc0\xe3\x09\x1e\x78\xe9\x01\x3b\x8e\xcd\xb1\xb6\x74\xfc\x90\x12\xd7\xc6\x9d\x76\x13\x3f\x73\x47\x6c\x25\xb6\x77\x8f\x50\xba\x3c\x13\xbb\x6e\x0c\x5e\xa5\x7d\xfa\x96\x56\xb6\x2a\x38\x08\x95\xc0\x6d\xb1\x27\x74\x88\x41\x2f\xd8\xd1\x76\xa4\x47\x49\x74\xc9\xb8\x23\x6b\x27\x5e\xf3\x55\x54\x92\xa9\x37\xe7\xfa\xf9\xe0\x52\x66\x0b\xcb\xb8\x47\xd6\xec\xf7\x85\x51\x22\x5c\x9a\x8b\x2f\x65\x35\xdb\x3c\x14\xca\x44\xdd\x2c\xcd\x95\x75\x3f\x9b\x9b\x56\x89\x8d\xd2\xb9\x45\x5f\xc9\x73\x17\x1d\x0a\x87\xd2\x55\x03\xf1\x44\x6d\xf9\x9b\x30\x8e\x20\xb6\x6d\x98\x37\x6b\x11\x58\xa3\x6c\x95\xa0\x6b\xe0\x7c\xf6\xcd\x72\xf1\x70\x67\x22\xcf\xcd\xa5\xdf\x1a\xef\x67\x0f\x0b\x4b\x93\xb7\xc4\x70\xed\x9c\xb3\x5f\xfa\x4a\xf3\xe3\xb9\x32\xfe\x78\x30\xcc\x9b\x23\x90\xc2\x91\x49\x9d\x7d\x67\xc9\x15\x26\x7a\xb3\x0f\xa1\x49\x5b\x6b\xc9\x1e\xea\xa2\xb3\x98\x85\xde\x5c\xe6\xc4\xf5\x88\x99\xc7\xd6\x23\xe6\x9e\xb6\x9d\xba\xb6\xb3\x19\xb1\xf1\xd9\x32\xcc\xd5\x7c\x69\x96\x0f\x5d\xca\x96\xb4\x10\x44\x7e\xb4\xa1\xdf\x7c\x6e\xf9\x9b\x0f\xc6\xdd\xac\x21\xf0\xfa\x2c\x4f\x89\x4d\xbc\x23\x53\xfe\x0c\x59\x10\x7f\xa6\x6c\xca\x35\x5a\x41\x66\xba\xc3\x53\x34\xbe\x46\xcb\xef\x01\x89\xe1\x7f\x59\xa6\x7c\x73\x6f\xcc\x2c\x83\x73\xe6\xfc\xce\x2a\x1c\xab\x83\x8c\xf1\xcd\xf2\xee\xce\x30\xad\x16\xce\x39\x01\x78\x87\x2a\x03\x34\x5f\xa1\x01\xcf\xa6\xf9\x33\x9a\x31\x19\xd4\x25\x73\xf8\x4c\x66\x61\x21\x25\x9e\x8a\x2d\xcd\xa5\x55\xb3\x27\xfa\x34\xb7\x3e\x14\x6a\x95\xd3\xea\x8a\xf8\x03\x97\x9a\x22\x5d\xc0\x37\x98\x64\x06\xf8\xb8\xf8\xbf\x68\x93\x16\x2f\x51\x1c\x3a\xc4\xdd\xc7\xd8\x47\x3e\x0e\x36\x7b\xa8\x07\x1a\x66\x60\xdb\xa4\x37\x2b\xe4\xfc\xaa\x46\x10\xae\xfc\x81\x41\x55\x85\xe3\xf0\x33\xb1\x29\xfc\xb4\x64\x43\x69\x86\x84\xa0\x96\x42\xe9\xf3\xb4\xe2\xa2\x04\x3c\x6d\xf8\x88\x86\x10\x0a\x46\xe8\x09\xfb\x7b\x72\x8e\x22\xec\xc5\x34\x33\x89\x66\x65\x94\x92\xb9\xe4\x11\xef\x7d\x28\xfd\xf0\xda\x27\x34\xc2\x0e\x49\xcb\xb9\x41\x6d\xf4\xbb\x97\x6c\xed\xd0\x73\x4b\x15\x5a\x05\x7e\xfd\x20\x33\xf4\xd9\xb1\x3f\x60\xe7\xe7\x82\x1b\x00\xc8\x0a\xa9\x53\x54\x5e\x8f\xdc\x5f\xd4\x43\xe4\xf0\x0c\xc1\x1f\x88\x29\x09\xf9\x91\x64\xcb\x64\x3e\x2c\x16\xa3\xec\x29\x8e\x22\x28\x17\xd3\x2c\x14\xa5\xf5\x2a\x1c\x9b\x5d\x84\x52\xb5\xb3\x9f\xe8\xcf\x30\x20\x67\xe7\x8d\xed\x52\xf7\x56\xfd\xe8\x5d\x67\x7b\x50\x7c\xed\x6d\xbc\xa0\xa1\x7a\x9e\x89\x42\x49\x8c\x63\x08\x3e\x24\x86\x05\x8d\x9f\x61\x99\x87\x6f\x7e\x39\x97\x2b\xcd\xfd\x71\xbf\x3a\x33\xae\x4c\xe5\x1a\x12\x5b\x06\xa1\x19\x8c\x64\x94\x3f\x65\x89\xe9\x4f\x08\x46\x08\xc4\x9e\xda\x68\xb6\xd1\xc5\x43\x2e\x49\xb0\xe7\x53\xf4\x2f\x1a\x06\x6b\xb9\x55\x78\x48\xeb\xd7\x2a\x8c\x2b\xb3\x0a\x2f\x1e\x25\x9a\x96\x2a\x3a\xf1\x9a\xd6\xe8\x45\xc5\xa4\x78\x22\x33\x52\x29\x4b\xc9\x96\xa5\xd0\x83\xa5\x59\xe8\xb2\x26\xe1\xb0\x2c\x7a\xf4\x45\x45\x57\x3b\x4b\x69\x17\xa8\x38\x4e\xf5\x39\x31\xc1\x89\x72\x52\x4e\xbb\x8f\x5c\x6d\xda\x62\x23\xb1\x9f\xb5\x62\xb7\x81\x65\x52\xdf\x52\x21\xb8\x3b\xc0\xed\x81\x03\x11\xee\xc8\x47\x42\xec\x28\x0c\x7d\xf1\x68\xda\x2e\xb3\x81\x44\xb2\xd6\xd9\x30\x9c\x5e\x12\x3f\xc9\x48\x76\xf8\x87\x9d\xfc\x80\x84\x2e\xb1\xa9\xf7\x67\x93\x4a\xbe\x97\x25\xa9\x5d\xbf\x5b\x5b\x92\xc6\x17\x2e\x4b\x0c\x4a\xff\xc0\xab\x5d\x48\x57\x03\xf0\xf4\x98\x27\x6e\x2c\xcb\x96\x9b\xa2\x92\xbf\xf1\x9c\x5c\x4b\x46\x86\x60\x65\xcd\xee\xad\x3c\x07\x98\x64\x0f\xe6\x26\x30\xcb\xa2\xf6\xef\x5f\xd8\x23\x73\x89\xee\xe6\xe6\xdf\x67\x8b\x07\xa3\xf8\x3d\xfb\x7c\xf8\x7d\x33\x83\xec\x01\x4d\x7a\x01\x8a\x96\x9f\x4c\xe3\x16\x64\x2b\x10\xe7\x95\x58\x37\xc0\x05\x6f\x05\xf9\x45\xda\x89\x50\x60\x39\xd9\x4e\x55\x05\xd4\x6a\x77\x51\x12\x74\xd3\x7c\xc1\xc9\x81\x65\x21\xe9\x85\x11\x29\x7f\x44\xc3\x7d\xec\x10\xbe\xd7\x25\xde\x9f\x7b\xaa\xc1\x60\x3a\x6d\x50\x68\x9c\x0a\x69\x95\xda\xaf\xb9\xa5\xbd\x03\x85\x6b\xa8\xb7\xac\xb5\x62\x60\xbb\xc5\x5e\x27\xd2\x88\x80\x17\xdb\xa7\xfb\x72\xf4\xeb\xa6\x14\x52\x5e\xcb\x51\x75\x04\xfb\x42\x57\xa5\x90\xd6\x74\x56\xb2\x09\x2d\xee\xaa\xd2\x6d\x3a\xd9\x09\xe2\xa7\xe6\xa8\xc3\xc1\xf2\x42\x45\xda\xa9\xeb\xd1\xba\x1c\x35\x1e\xb4\x0b\xd1\xf2\x0c\x0a\x4b\x1d\x82\x2c\xfb\xfc\x9f\xe4\x8f\x90\x89\x91\xe0\x89\xf8\xa0\x94\xa8\x8c\x84\x61\xc8\xe6\xa0\xe4\x95\x0c\xee\x48\x5a\x8e\x0b\x87\x52\x2b\xc8\x86\xa9\xb7\x09\x70\xb2\x07\xd6\x02\xb3\xbf\x7b\x73\xfe\x8f\x7f\x1e\xa2\xc2\xbf\xff\x23\x8a\x0b\x40\x51\x4b\x2b\xc9\x2e\xcc\x5e\x9d\x34\x39\x1e\x78\x05\x60\x86\xd6\x28\x73\xe0\xd5\x64\xc3\x90\x81\x39\xed\x35\x2c\x1c\x14\xff\x60\xc5\xb7\xb0\x81\x37\x82\x52\x1a\x0e\x18\x3b\x3c\xbc\xd7\xab\x73\xe2\xf3\xf3\x92\xb5\xc5\x3b\xb6\x95\xd3\xee\x04\x87\x19\x80\xc1\x9f\xb0\x3f\x1c\x68\xa5\x38\x60\x8f\x98\x6c\x1c\x1f\x53\x7a\x3a\x14\xda\x8d\xf7\x56\x1c\x0a\xff\x27\x46\x72\x9b\x76\x8c\xd2\x66\x91\xba\x35\x83\x6e\x67\xd6\x4c\x01\x71\x6e\xae\x0c\x88\x2a\x73\xd3\x5a\x36\x1a\x32\x59\xd8\x58\xa1\xe1\x60\x62\x7b\x81\x97\x78\x50\x68\xe5\xfd\xc9\x0b\xfa\xcd\x1f\x8c\xd0\xe0\xea\x72\xf2\x66\x7c\x79\x35\xbe\x7a\x87\x26\x57\xd3\xff\x9f\x4c\x2f\xdf\x5c\x4c\xde\xbd\xbb\xba\xfa\x65\x7c\xf9\x76\x00\x4a\x6b\x71\xbf\x4a\x5f\xd6\xd9\x49\xe8\xa5\x7f\xc9\x7d\x7c\x8b\x4c\x78\xf6\xf6\x2f\x4c\xa4\xc4\x4e\xad\xbd\x20\x1d\x43\x29\xf8\x8a\xda\x35\x3d\xb0\x15\xf5\x3b\x7a\x60\xab\x51\x7a\x76\x91\xf2\x92\x6a\x07\x4e\x88\x42\xca\xca\x58\x18\x37\x56\xa9\xb7\x79\x01\xc5\x76\x07\x87\x30\x42\x93\x51\xde\xd6\x54\x6f\x0f\x49\x75\xd3\x83\xc9\xb5\xd2\xfa\xe3\x8d\xde\x35\x73\xeb\xc3\xec\x2a\xff\xd5\xc5\xf0\xd2\x3c\xad\xbb\x49\x84\x2f\x54\x8b\x86\x3d\x7f\x03\xdb\x29\xff\x6b\x04\x82\x9a\x8c\x2c\x94\xce\x6e\x6f\xcb\x6f\x78\x45\x6a\xa0\x8f\xf7\xf3\xbb\xd9\xfd\x17\xf4\x37\xe3\x0b\x1a\x7a\x6e\xd7\xd6\xc8\x29\xa0\xb4\x8b\x14\x21\xd3\x50\x52\x1b\x68\xfb\x8b\xfe\x13\x41\x95\x09\x6d\x03\xdb\xaa\xa8\x12\x6e\xe9\x02\x05\xc3\x94\xdd\xb4\x38\xa6\x08\xc9\xaf\x68\x1c\x18\xa6\xef\x96\x84\x25\xc9\xc3\x6a\x6e\xfe\x15\xad\x93\x98\x10\x34\x64\xc4\xa3\x46\xce\x2f\x52\x35\xbb\x10\xd2\x9b\x9e\x59\x21\xa4\xa5\x64\xbd\x7c\x12\xe9\xc6\xee\xb4\xf4\xa6\x5d\xce\x4f\x4f\xbf\x5a\xa5\x36\x6a\x16\x65\xc2\x7d\x5e\xbe\xb2\xf3\x52\xbd\x1f\xcc\x39\x78\x70\xa6\x7e\x8d\x79\x19\x04\x7f\xd1\x53\xd1\x5f\xd4\xd6\x1d\xf1\x77\x36\x32\xd5\x0f\x49\x73\xaf\x4a\x43\x72\xac\xab\xee\xa1\xb7\x3c\x12\x76\xa6\x15\x10\xf8\x0d\xac\xfe\x51\x30\xce\x65\x20\x92\xfa\xe6\x28\x5c\x4d\x38\xb5\xdb\x67\xfd\x22\xaa\x32\x2f\x83\xe2\xef\xc7\x2a\x28\xc4\xfa\x35\xef\xd3\xf5\xad\x64\x43\x82\xde\xd9\x15\xa8\xab\xbe\x3d\xd8\xab\xee\x4a\x71\x65\x20\xc5\xcb\xe5\xaa\x17\xcf\x09\x3b\x20\xe9\x7b\x01\xda\x24\xa9\xf5\x57\x2e\x42\xfd\xde\x68\x3f\x6e\xbe\x55\x86\xd2\x0d\xa5\x44\x0a\xb5\x85\xd7\x65\x4f\xa1\xbb\x48\x90\xf2\xa4\x16\x94\xfa\x28\x4e\xbb\x6d\x2a\x82\x8e\x71\x34\xfa\x97\xa5\x4f\xbc\x08\x8d\xf7\xd5\x4a\x30\xb5\x09\xfa\xd0\xca\x37\xc9\x5f\x67\x6d\xca\x17\x16\x54\xb8\x4a\xb4\xfa\x90\x84\xf7\xec\x5f\x07\x9b\xf0\x56\x86\x0a\xa4\x68\x92\x3e\xda\xe2\xa3\x84\xd7\x41\x58\x34\xf5\x55\xa8\xa4\x95\x80\xe2\xd3\x8c\x13\xc2\xa8\xcb\x12\x66\x58\x5d\xdd\x44\xeb\x37\x2a\xa7\xf0\x13\x6d\x02\x75\x10\x55\x67\x74\x43\x77\xaa\xe0\xd9\x14\xa3\x85\x44\x1d\x42\x75\x3e\x67\x3a\x05\x20\x0d\xb9\x92\x04\xb3\x25\xc3\x67\x13\x5f\x00\xb9\xf1\x65\xd8\x6b\x63\x6f\xbc\xca\xec\x6c\x04\x65\x35\xaf\xfc\xca\xee\x84\x1e\xa6\x29\xed\xe8\x32\xa2\xed\x2b\xc3\x7e\x56\xad\x45\x82\x32\x7b\x1d\x0e\xf9\x45\x96\xf1\x6f\xbf\xa1\x01\x0d\x7d\xc8\x04\x69\x7a\x5d\x2d\x3d\x94\x83\xe9\x34\x7d\x9f\x79\x7e\x3e\x42\x72\x42\x27\x74\xf5\x08\x3d\x4a\xf7\x24\x96\x93\xae\xc3\xfd\x66\x9b\x68\x89\xaf\x90\xb6\x2b\x50\x21\xad\xa9\x70\x8e\x3e\x7d\x30\xee\x8d\xdc\x03\xa1\x5f\xd1\xcf\x3f\x97\x96\x4f\xf6\xe9\x2c\x72\xc2\x5d\xe4\x93\x84\x64\x2b\xf1\xdf\x00\x00\x00\xff\xff\x15\x66\xc1\xbc\x67\x3b\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 15207, mode: os.FileMode(420), modTime: time.Unix(1456779066, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x6d\x6f\xdb\x46\x12\xfe\xee\x5f\xb1\xc8\x17\xc9\x38\xf9\x2e\x41\x0e\x41\xce\x46\x02\x28\x36\x73\x11\x2a\x53\x89\x44\x35\x09\x8a\x82\x58\x91\x2b\x8a\x35\xc9\x65\x76\x49\xbf\xa4\xe8\x7f\xef\x2c\xdf\xdf\x96\xa4\x6c\xd2\x2d\x0a\xb4\xe2\xce\xce\xcc\x33\x33\xfb\xcc\x70\xe9\xb3\x33\xf4\x2f\xd7\xb6\x18\x0e\x08\xda\xfa\x27\x67\x67\xf0\x2f\xfa\x4c\x79\x60\x31\xb2\xf9\xb2\x44\x26\x0e\xf0\x0e\x73\x82\xcc\xd0\x8d\x96\x4f\x36\x8a\x86\x78\x00\xf2\x2e\xf1\x02\x3d\xb0\x5d\x42\xc3\x00\xbd\x43\x2f\x2f\xa2\x25\x87\x1a\x37\xf5\xa7\x86\x63\x0b\x69\xe2\x19\xd4\xb4\x3d\x0b\x16\x26\x5b\xed\xe3\xdb\xc9\x45\xaa\xce\x33\x31\x33\x75\x83\x7a\x7b\xca\x5c\x90\xd0\x79\xc0\xe0\x3f\x1c\x24\xa9\x97\xe8\x38\x10\x50\xbd\x0f\x3d\x23\xb0\xa9\xa7\xef\x40\x13\x11\xeb\x7b\xec\x70\x52\x32\x03\x0a\x74\x97\x70\x8e\xad\x48\xe0\x0e\x33\x0f\x74\x5d\x9c\x24\xf0\x54\xec\x92\x73\xe4\x3b\xbe\xc5\x7f\x38\x17\x48\x7b\xf0\xe1\xa7\xf2\x4d\x53\xd4\xcd\x62\xa5\x5e\xa0\x0d\x58\x72\xf1\x39\x3a\xbb\x40\xab\x3b\x8f\x30\xf8\xbf\x08\xf9\xe5\x5a\x99\x6b\x4a\x2e\x89\x16\x1f\x91\xba\xd2\xe0\xc1\x62\xa3\x6d\x52\x85\xe8\xeb\x42\xfb\x84\x36\x97\x9f\x94\xeb\x39\xf2\x2d\xdd\x80\x08\x3a\x54\x58\x2f\x99\xcf\xb5\x54\x1c\xb9\x5c\x5d\x5f\x2b\xaa\xd6\xe2\x46\x2c\x80\x60\x6b\x4d\x09\x5a\x6c\xd0\xe4\xf3\xf2\x3f\xbe\x25\x92\xe7\x33\x6a\x10\x33\x64\xd8\x41\x0e\xf6\xac\x10\xe2\x31\xa9\xfa\x71\xe0\x01\x65\x64\xb8\x28\xc4\xfa\xca\x41\x08\x77\x8e\x6d\xc8\x03\x50\x76\xe1\x71\xf8\x13\xb3\x02\xbe\x28\x59\x14\x80\x2e\x04\xb5\x84\xc4\x73\x51\x71\x9c\x04\x1c\xd1\x3d\x9a\xde\x90\x87\x19\xba\xc5\x4e\x48\x4e\x91\x8f\x6d\xc6\xa3\x90\x44\x65\x48\x30\x33\x0e\xba\x8f\x83\x03\x54\x4d\xec\xf5\xac\x9c\x42\x21\x66\x92\x3d\x0e\x1d\x28\x7d\xbc\x73\x08\xf7\xb1\x41\x44\x39\x4f\x2a\xab\x77\x76\x70\xd0\xa9\x6d\x16\x2a\xb4\x1c\x77\x5b\x78\xf6\xa0\x63\xc3\xa0\xa1\x17\xf0\x14\xbe\x36\xff\xb0\x54\x72\xf0\x49\xec\xb2\x08\x80\x58\x66\xf6\xbc\x98\x8f\x68\x5f\x4d\x2b\x9a\x9e\x20\xf8\xc7\x36\xd1\xce\xb6\x6c\x2f\x88\x32\xa5\x6e\x97\xcb\x59\xf4\x1c\x9b\x26\x83\x73\x02\x47\x0b\x33\x6c\x04\x84\x41\x60\xd8\x03\x84\x6b\xfa\xe6\xbf\xa7\x27\xa7\xb5\x5a\x49\xb4\x93\xfd\x9e\x18\x43\xbb\x9c\x28\x4d\x3c\xae\x00\xd1\x65\x08\x52\x39\xea\x13\xe0\x30\xc1\x0b\x32\xc9\x17\x94\x99\x84\xbd\x40\xb0\x42\x2c\x40\x5a\x5e\x8d\xea\xa5\x79\xc9\x24\x01\xb6\x1d\x8e\xfe\xe0\xd4\xdb\xc9\x83\xe2\x10\x13\xf6\x0e\x1c\x94\x44\x69\x12\x14\x4e\x7e\x84\x40\xa1\x32\x47\x63\x61\xfd\x80\xf9\xa1\x39\xa3\x15\x79\x9f\x91\x5b\x9b\x86\x5c\xef\xdc\x98\xc4\x88\x61\x8f\xe3\x98\x7d\xa3\xac\x64\x7e\x5c\x29\x1f\xe7\xdb\xa5\x86\x5e\x56\x2c\xe4\x59\xe9\x27\x6f\x38\x94\x13\x53\xc7\x01\x12\x1d\x04\xda\x82\xeb\x23\x71\x90\x44\x2f\x11\x4f\xd0\x4f\xea\x91\xea\x1e\x46\xa0\x19\x75\x6d\x8a\x65\x43\xdf\xec\x2d\x9b\xd5\x51\xf2\xd3\xf5\x29\x83\xb0\xe8\xb7\x90\x0f\x40\x54\xc3\xf2\xaa\x5a\x51\x14\x48\x03\x70\xdb\x1e\x6f\x2e\xc8\x3d\x21\xba\x4f\xa9\xd3\xbc\x2a\x9a\xae\x0e\x22\x92\x5c\x47\xcb\x70\x76\x09\xbb\x95\x89\xb8\xf8\x5e\x0f\xee\x75\x20\x3e\x9d\xdb\x3f\xeb\x52\xf2\x52\xce\xd3\xe6\x63\x16\xd8\x86\xed\xe3\xc1\x19\xaa\xd9\x46\xce\x57\xcd\x98\xfa\x1f\xf7\x6e\x02\x39\x16\x3f\xa8\x80\x60\xfe\x48\xc3\xb0\x51\xbe\x6c\x15\xf5\xb2\x25\x12\x45\xf0\xa9\x74\x3f\x1b\x11\x82\x8d\x36\x5f\x6b\x71\x23\x7d\x15\x3d\x58\xa8\xa0\x2c\x6a\x7d\x1f\xbe\x27\x8f\xd4\x15\xba\x5e\xa8\xbf\xce\x97\x5b\x25\xfb\x3d\xff\x96\xff\xbe\x9c\x43\x0b\x46\xaf\x06\x01\x8a\x56\x5f\x55\xe5\x0a\x6c\x77\x20\x9e\x2f\x35\x65\x7d\x24\xe0\x4c\x77\x87\xf8\xbf\x6d\xb3\x13\xcb\x58\x85\xda\xd5\x4c\x8b\xf4\x28\x6d\xb8\xbe\x0f\x3e\xc4\xb8\xa2\x7e\xf4\xc4\x76\x14\x3f\xe2\x34\x64\x06\x49\x4b\x5d\xc2\xfd\x29\x4f\x4d\x26\xe7\xe7\x35\x89\x1e\x87\xa2\x08\x6f\x3c\x5a\x90\x59\x89\x62\x2f\xa1\x85\xa6\xbd\xcd\x09\x78\x0a\x29\xc8\x3c\x1b\x96\x16\x3a\xac\x3c\x17\x31\x1c\x09\xf6\x89\xd4\xd0\x61\xad\x4e\x0e\xb2\x0d\x2d\xf4\x50\xd8\x32\x5e\xc9\xa6\x14\x51\xf4\xaf\xf7\x38\x96\x4c\x61\x1d\x43\x5e\x5f\x06\x69\x27\x83\x46\xd9\xdc\xb4\x7c\x5e\xc1\xd2\xd6\x2c\x9b\xf5\xfe\x91\x69\x0d\xe6\x1e\xe2\xdd\x12\x07\x9c\x42\x01\xb9\xaf\x51\xf5\xbd\x98\x9d\xe0\x35\x4d\xb2\xe8\x12\xf1\x0a\xd9\xb8\x24\xa2\x20\x5b\xe6\xb6\xe5\xe1\x20\x04\xd5\x0d\x61\xff\xdf\x9b\xd3\xdf\x7e\xcf\x59\xf8\xcf\xbf\x9a\x78\x18\x24\x2a\x43\x1c\x71\xa9\x1e\x75\x83\x3a\x67\x67\xba\x3c\x08\x43\x2b\xab\xe7\xba\xea\x6a\x12\x64\x10\x4e\x7d\x07\x89\x83\x17\x56\x88\xe2\x5b\x28\x60\x8b\x44\x64\x58\x3c\x4c\x70\xbc\x92\xa3\x93\xd8\xee\x75\xde\xe3\xe3\xb2\x52\x97\x5d\xdd\x1d\xc5\xf2\x97\xab\xe5\xf6\x5a\x15\x29\x15\x2f\xd4\x29\x4a\x0f\xe2\x0d\xaf\xed\xd3\x49\xaf\x81\x02\xc2\xc1\x88\x65\x38\x98\xf3\x1a\xa3\x0f\x86\x42\xda\xac\x8e\xc2\xd1\xc1\x7e\x6d\x48\x3a\x42\xe1\xdf\x90\x87\xfc\x5a\x45\xdd\x68\xeb\xf9\x42\x6d\x41\x5b\x27\xbc\x23\x13\x18\x95\xd2\xfc\xea\xaa\x60\xad\x8f\x8f\xe8\xf3\x7a\x71\x3d\x5f\x7f\x47\xbf\x28\xdf\xd1\xd4\x36\x8f\xef\xc1\x23\x22\x95\xd9\x6c\xc3\xda\xea\x67\x27\xda\x5d\x36\xa0\xa4\x90\x16\xea\x95\xf2\xed\x11\x8d\x2a\xda\x57\xd0\x27\xee\xcc\x1a\xdb\xd6\x76\xb3\x50\xff\x8f\x76\x01\x83\x17\xce\x69\x22\x3c\xab\xf5\x85\x26\x4f\x45\x7b\x1b\xcc\xcd\xa8\x57\xf6\xf2\xb1\xda\x61\x9b\x5c\x8b\x1b\xea\x60\xce\xc5\xea\xfa\xb9\x57\xe9\xe5\xb3\x7a\xdb\x6e\xac\x71\x1d\x38\xf8\x21\x5e\x7f\xaa\xdb\x5b\x75\x01\x53\x56\xe2\x7d\x45\x77\x11\x43\x7a\xed\x56\x72\xbf\xe9\x35\x7b\x96\xde\xa0\xc9\x3c\xcf\x69\x75\x48\x9f\x81\x3d\xfb\x7a\x9b\x4f\xf5\xb3\xc6\x8b\x82\x0e\x04\xd4\xd7\xfd\x51\x40\x24\x8a\x8b\x38\x24\xfd\xef\x51\xb0\xea\x68\xb2\x1b\x3d\x48\xf8\xd0\x80\xca\xba\x8b\x98\xd2\xbb\xca\x12\x88\x66\xf7\x8a\xa7\x77\x14\x1f\x6b\x06\xfa\x1d\xdb\x06\x6f\x6d\xcf\x24\xf7\x7a\xf5\x5e\x5d\x07\xbd\xc9\xe5\xf9\xa0\xae\x77\x5a\x2b\xe2\xc8\x2e\xf9\xcb\xec\x1d\x0b\x1e\x01\x64\xe0\xf0\xb7\x19\xea\x76\xbf\x33\x05\x09\x05\x08\x7d\x62\x2e\x1e\x86\xde\x5b\x4d\x74\x12\x90\x10\xea\xf0\x3a\x39\x1c\x42\x65\x76\xc9\x3d\x86\xeb\x4d\x76\x3a\x0f\x69\x26\xd9\x1f\xc4\xa8\x35\x53\xb2\xf3\x18\x8a\x91\xab\xab\xdc\xe2\x8f\x9c\x82\xda\x47\x83\x4e\x2c\x95\x0d\xfd\x91\x15\xbe\xe1\x3c\x4f\x66\x8a\x1f\x8d\xba\x60\x15\x64\xfb\x23\x6a\xfa\x3c\xf5\x3c\xd0\x1a\x3f\x8c\x75\x61\x6c\xda\xd4\x1f\x6c\x3a\x29\x3e\x0f\xc0\xec\xa2\xa7\x0b\x94\x74\xf2\x2f\xab\xce\xef\xc8\x47\xe7\x86\xaa\xa9\xc6\xa9\xea\x58\x86\x28\x2b\x2d\xdf\x23\x8f\x41\x11\x6d\xf6\xfa\x00\x2a\xef\x38\x0e\xdc\x48\x3d\xb3\x6e\xa5\x17\x90\xa6\xce\x19\x0d\xcd\xc1\xfd\x48\xd3\x78\xa2\x58\x32\x10\x3e\x72\x1e\xaf\x27\x44\x9e\x8f\xe2\xf8\x39\xfa\x71\xa9\x1b\x7b\xf4\x24\x0c\xc2\x26\xc9\x66\xa3\xf4\x5d\x52\xdf\x51\x7a\x33\x4c\x41\xb5\x18\xe8\x1c\xc1\xa6\xd3\xf4\xbb\xd8\xd9\xfb\xf7\x68\xc2\xa9\x03\xf3\x0c\x17\xdf\xbe\x45\x89\x4d\xce\xcf\xc5\x75\xed\xe9\xe9\x0c\xc9\x05\x0d\x6a\xf6\x13\xb4\x39\x0f\x09\x93\x8b\xee\x68\x68\x1d\x82\x5e\xe6\x4b\xa2\xed\x0e\x94\x44\x2b\x2e\x9c\xa2\xaf\x9f\x94\xb5\x12\x9f\x27\xf4\x0e\xbd\x7e\x5d\xc8\x9e\xec\xaf\xf9\x90\x41\x5d\xdf\x21\x01\x89\x32\x51\xfc\x43\xc0\x2b\x7a\xe7\x9d\x98\x8c\xfa\x28\xfa\x1b\xa7\xe6\x72\x31\x30\x37\x20\x5f\x17\x1d\x82\xe5\x03\xd5\xb6\xa9\xc0\x11\xbd\xc4\xfa\x6b\x4e\x5b\x5b\x9b\x4c\x5a\x55\x6d\x32\xd9\x1b\x4b\x26\xf4\x77\x00\x00\x00\xff\xff\x5d\xb2\x1f\x7d\x3f\x29\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10559, mode: os.FileMode(420), modTime: time.Unix(1457459961, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{
	}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

